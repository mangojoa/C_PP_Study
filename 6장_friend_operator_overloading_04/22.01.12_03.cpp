/* [22.01.12] 연산자 중복
동일한 연간 혹인 기호(+-/*)를 대상(피연산자)에 따라 서로 가른 의미로 해석하는 일종의 다형성(polymorphism)이다.

여러개 만들 수 있는 것이 함수 중복이라면, 피연산자에 따라 서로 다른 연산을 하도록
동일한 연산자를 중복해서 작성하는 것이 연산자 중복이다.

피연산자에 적합한 연산자를 새로 작성하면 프로그램이 보다 쉽게 표현된다.

연산자 중복의 특징
1. C++ 언어에 본래 있는 연산자만 중복 가능하다.
	(+,-,/,*,==,!=,%,&&) 등 본래부터 있는 C++ 연산자에 새로운 의미를 부여하는 것은 가능하나.
	%%, ## 등의 새로운 연산자를 만들어 낼 수 없다.

2. 연산자 중복은 피연산자의 타입이 다른 연산을 새로 정의하는 것이다.
	C++에서 기본 + 연산자의 피연산자는 모두 숫자이다.
	그러므로 + 연산자를 새로 중복하려면 객체+수 / 수+객체 / 객체+객체 와 같이 정수나 실수가 아닌 
	객체나 값을 더하는 + 연산이여야 한다. 

3. 연산자 중복은 함수를 통해 이루어진다.
	연산자 중복이란 새로운 연산 처리를 수행하는 함수를 구현하는 것이다.

4. 연산자 중복은 반드시 클래스와 관계를 가진다.
	중복된 연산자는 반드시 피연산자에 객체를 동반한다. 그러므로 연산자 함수를 클래스의 맴버 함수로 구현하든지,
	아니면 전역 함수로 구현하고 클래스에 프랜드 함수고 선언한다.

5. 연산자 중복으로 피연산자의 개수를 바꿀 수 없다.
	이항 연산자인 +에 대해 피연산자가 1개 혹은 3개인 + 연산자로 중복할 수 없다.

6. 연산자 중복으로 연산자의 우선순위를 바꿀 수 없다.
	연산자의 중복을 통해 연산의 순위나 방향을 바꿀 수 없다.
	예를 들어 '2+5*6'의 경우, * 연산자의 우선순위가 + 보다 높기 때문에 먼저 계산되어 결과가 35가 된다.
	이런 연산자의 순위를 바꿀 수 없는 연산자 중복은 불가능하다.

7. 모든 연산자가 중복 사능한 것은 아니다.
	중복 불가능한 연산자 [ .   .*    ::    ? : ] 이다.

연산자 함수 선언과 연산자 함수 개요
	1. 클래스의 맴버 함수로 구현
	2. 외부 함수로 구현하고 클래스의 프랜드 함수로 선언 

연산자 함수를 선언하는 방법을 알아보자 operator 키워드와 함께 다음과 같이 연산자 함수를 선언한다.
	
	리턴타입 operator 연산자(매개변수 리스트);

	연산자 함수는 이름이 'operator' 키워드와 '연산자'로 구성된다는 점 외에는 보통 함수 선언과 동일하다. 
	연산자 함수를 클래스의 맴버 함수로 구현하느냐 아니면, 외부 함수로 구현하고 프렌드로 선언하느냐에 따라 
	연산자 함수의 매개 변수 리스트는 달라진다. 
*/

#include <iostream>
using namespace std;

// 1. 외부 함수로 구현하고 클래스에 프렌드 함수로 선언하는 경우
// + 연산자와 == 연산자 함수는 다름과 같이 외부 전역 함수로 작성하고,
// 두 개의 피연산자를 모두 매개 변수에 전달한다.

Color operator + (Color op1, Color op2); // 외부 전역 함수
bool operator == (Color op1, Color op2); // 외부 전역 함수

class Color {
	///	...
	friend Color operator + (Color op1, Color op2);
	friend bool operator == (Color op1, Color op2);
};

// 2. 클래스의 맴버 함수로 선언되는 경우
// +, == 연산자 함수를 Color의 맴버 함수로 구현할 때 다음과 같이 선언한다. 
class color {
	//...
	color operator + (Color op1, Color op2);
	bool operator == (Color op1, Color op2);
};

// +나 ==의 오른쪽 피연산자만 매개 변수 op2에 전달되고, 왼쪽 피연산자는 객체 자신이므로 매개 변수에 전달되지 않는다.
// 클래스의 맴버로 구현되었든 외부 함수로 구현되었든, +나 == 연산자는 다음과 같이 사용된다.

Color a(BLUE), b(RED), c;

c = a + b;

if (a == b) {

}