/*
인라인 함수 
짧은 코드로 구성된 함수에 대해 함수 호출 오버헤드로 인한 프로그램의 실행 속도 저하를 막기 위해 도입된 기능이다.
*/

#include <iostream>
using namespace std;

/*
컴파일러는 인라인 함수를 호출하는 곳에 인라인 함수의 코드를 그대로 삽입하여 
함수 호출이 일어나지 않게 한다. 이렇게 되면, 함수 호출 오버헤드가 없어지기 때문에
실행 속도가 빨라진다.
*/

inline int odd(int x) { // odd 함수를 인라인 함수로 선언
	return (x % 2);
}

/*
인라인 함수의 장단점 
C++에서는 맴버 변수의 값을 알아내고 맴버 변수에 값을 쓰는 
이른바 getter/setter라고 불리는 작은 맴버 함수들이 많이 존재하며, 이 맴버 함수들을 호출하는 코드 역시 많이 존재한다.
이런 작은 함수를 인라인으로 선언하면 C++ 프로그램의 실행 속도를 향상시킬 수 있다. [장점]
그러나 인라인 함수를 호출하는 곳에 인라인 함수의 코드를 단순 삽입하므로 호출하는 곳이 여러 군데이 있으면 
그 만큼 전체 크기가 틀어나는 단점이 있다. 
*/

int main() {
	int sum = 0;

	for (int i = 1; i <= 10000; i++) {
		if (odd(i)) { //  이 부분의 odd(i)를 (i%2)로 컴파일 된다. 
			sum += i;
		}
		cout << sum;
	}
}

/*
인라인 함수의 제약사항 
inline 선언은 컴파일러에게 주는 일종의 요청이지 강제 명령이 아니다. 
컴파일러는 함수의 크기나 효율을 따져서 불필요한 경우, inline 선언을 무시할 수 있다. 
컴파일러에 따라 재귀함수(recursion), static 변수, 반복문, switch 문, goto 문 등을 가진 함수는 인라인 함수로 허용하지 않는다.
*/